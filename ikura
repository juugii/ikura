#! /usr/bin/env bash

# Jules GILET <jules.gilet@curie.fr>

# Pipeline for the primary analysis of single cell (3') 10x experiments
# (pseudo-)alignment is perfomed by salmon engine

VERSION="v1.0"
EXECDIR=${PWD}
SCRIPTDIR="$(dirname "$0")"

usage(){
	
	echo ""
	echo "Ikura ${VERSION}"
	echo "Usage:	$0	[-q|--no-fastq-check] (optional)
		[-1|--read1] <read1>
		[-2|--read2] <read2>
		[-n|--expectedCells] <expectedCellNb>
		[-o|--output] <samplePrefix>
		[-i|--index] <ikuraIndexDir>
		[-t|--threads] <coresNb> (optional, default is 10)

	NOTE: files should be specified as absolute paths.
	Ikura creates an output directory where the command is executed.
	"

	exit 0

}


if [ $# -eq 0 ]; then

	usage
fi


cd "${SCRIPTDIR}"
if ! sources/checkdep; then
	exit 1
fi

source dependencies.txt
source sources/pydep

# options
CHECK="T"
CORES=10
cd "${EXECDIR}"


while [ "$#" -gt 0 ]; do
	case "$1" in

		-h|--help)	usage;;

		-q|--no-fastq-check) CHECK="F"; shift 1;;
		-1|--read1) READ1="$2"; shift 2;;
		-2|--read2) READ2="$2"; shift 2;;
		-n|--expectedCells) MAXCELLS="$2"; shift 2;;
		-o|--output) PREFIX="$2"; shift 2;;
		-i|--index) IKURAINDEX="$2"; shift 2;;
		-t|--threads) CORES="$2"; shift 2;;

		-*|--*) echo "unknown option: $1" >&2; exit 1;;

	esac
done


# exec
SECONDS=0

# setup directories
if [ ! -d "$PREFIX" ]; then
	mkdir $PREFIX
fi

cd ${PREFIX}

if [ ! -d "logs" ]; then
	mkdir logs
fi

if [ ! -d "plots" ]; then
        mkdir plots
fi

if [ ! -d "fastq" ]; then
        mkdir fastq
fi

if [ ! -d "qc" ]; then
        mkdir qc
fi

# data process
echo "job started on" $(date)

if [ "${CHECK}" == "T" ]
then
	echo "cleaning fastq files..."
	${CUTADAPT} -j ${CORES} -q 30 --max-n 0 --minimum-length 26:90 --pair-filter=any -o fastq/${PREFIX}_trimmed_R1.fastq.gz -p fastq/${PREFIX}_trimmed_R2.fastq.gz ${READ1} ${READ2} | tee logs/cutadapt.log

	echo "checking the quality of fastq files..."
	for FILEZ in ${READ1} ${READ2} fastq/${PREFIX}_trimmed_R1.fastq.gz fastq/${PREFIX}_trimmed_R2.fastq.gz; do
		SHORT=$(basename ${FILEZ})
		gunzip -c ${FILEZ} > ${SHORT%.*}.fastq
		${FASTQC} -o qc/ -t ${CORES} -q ${SHORT%.*}.fastq
		rm ${SHORT%.*}.fastq
	done

	echo "identifying valid cell barcodes..."
	${UMITOOLS} whitelist --stdin fastq/${PREFIX}_trimmed_R1.fastq.gz --bc-pattern=CCCCCCCCCCCCCCCCNNNNNNNNNN --expect-cells=${MAXCELLS} -L logs/umiWhitelist${PREFIX}.log --verbose=2 --plot-prefix=plots/filteringPlot_${PREFIX} > whitelist_${PREFIX}.txt

	awk '{print $1}' whitelist_${PREFIX}.txt > whitelist_${PREFIX}_alevinReady.txt
mv whitelist_${PREFIX}.txt logs/

	echo "starting alignment..."
	${SALMON} --no-version-check alevin -lISR -1 fastq/${PREFIX}_trimmed_R1.fastq.gz -2 fastq/${PREFIX}_trimmed_R2.fastq.gz --chromium --whitelist whitelist_${PREFIX}_alevinReady.txt -i ${IKURAINDEX} -p ${CORES} --dumpFeatures --dumpCsvCounts -o alevinOut --tgMap ${IKURAINDEX}/txp2gene_*.tsv

else
	echo "identifying valid cell barcodes..."
	${UMITOOLS} whitelist --stdin ${READ1} --bc-pattern=CCCCCCCCCCCCCCCCNNNNNNNNNN --expect-cells=${MAXCELLS} -L logs/umiWhitelist${PREFIX}.log --verbose=2 --plot-prefix=plots/filteringPlot_${PREFIX} > whitelist_${PREFIX}.txt

	awk '{print $1}' whitelist_${PREFIX}.txt > whitelist_${PREFIX}_alevinReady.txt
mv whitelist_${PREFIX}.txt logs/

	echo "starting alignment..."
	${SALMON} --no-version-check alevin -lISR -1 ${READ1} -2 ${READ2} --chromium --whitelist whitelist_${PREFIX}_alevinReady.txt -i ${IKURAINDEX} -p ${CORES} --dumpFeatures --dumpCsvCounts -o alevinOut --tgMap ${IKURAINDEX}/txp2gene_*.tsv
fi

echo "exporting matrix..."
${RPATH}script ${SCRIPTDIR}/sources/createMatrix alevinOut/ ${IKURAINDEX}/codprot

${MTQC} -n ${PREFIX}_Ikura_QC_report.html --title "Ikura Report" --comment "QC on sample ${PREFIX}" .

echo "cleaning directories..."
mv alevinOut/logs/* logs/
mv alevinOut/libParams/* logs/
mv alevinOut/*.json logs/
mv alevinOut/outs/* alevinOut/
mv alevinOut/alevin/MappedUmi.txt logs/
mv alevinOut/alevin/filtered_cb_frequency.txt logs/
rm -r alevinOut/alevin/ alevinOut/aux_info/ alevinOut/libParams/ alevinOut/logs/ alevinOut/outs/
mv whitelist_${PREFIX}_alevinReady.txt logs/goodCellBarcodes_${PREFIX}.txt
mv alevinOut/ outs/
rm -r ${PREFIX}_Ikura_QC_report_data

END=${SECONDS}

echo "job complete on " $(date)
echo "total execution time (min): " $((${END} / 60))

exit 0
