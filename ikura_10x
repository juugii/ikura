#! /usr/bin/env bash

#Jules GILET <jules.gilet@curie.fr>

#custom pipeline for the analysis of single cell 10x experiments
#(pseudo-)alignment is done with salmon

#requires a salmon-indexed transcriptome and its tx2gene
#requires python-3.6.5 or above
#requires umi_tools 0.5.4 or above
#requires fastqc-0.11.7 & cutadapt 1.16
#requires R-3.5.0 or above

#options
CHECK="T"
CORES=10

if [ $# -eq 0 ]; then

	echo "The script requires the following options:

                        ikura_10x       [-q|--no-fastq-check] (optional)
                                        [-1|--read1] <read1>
                                        [-2|--read2] <read2>
                                        [-n|--expectedCells] <expectedCellNb>
                                        [-o|--output] <samplePrefix>
                                        [-i|--index] <salmonIndex>
                                        [-g|--txp2gene] <txp2gene>
					[-t|--threads] <coresNb> (optional, default is 10)

                        directories and files should be specified as absolute paths

                        Additional requirements:
                        requires python-3.6.5, R-3.5.1, salmon-0.11.1, awk
                        requires a samon-indexed transcriptome
                        requires umi_tools 0.5.4 or above
                        fastq checking and precleaning require fastqc-0.11.7 & cutadapt 1.18
			"

	exit 0

fi

while [ "$#" -gt 0 ]; do
	case "$1" in

		-h|--help)	echo "The script requires the following options:

			ikura_10x 	[-q|--no-fastq-check] (optional)
					[-1|--read1] <read1>
					[-2|--read2] <read2>
					[-n|--expectedCells] <expectedCellNb>
					[-o|--output] <samplePrefix>
					[-i|--index] <salmonIndex>
					[-g|--txp2gene] <txp2gene>
					[-t|--threads] <coresNb> (optional, default is 10)

			directories and files should be specified as absolute paths

			Additional requirements:
			requires python-3.6.5, R-3.5.1, salmon-0.11.1, awk
			requires a samon-indexed transcriptome
			requires umi_tools 0.5.4 or above
			fastq checking and precleaning require fastqc-0.11.7 & cutadapt 1.18
			"

			exit 0;;

		-q|--no-fastq-check) CHECK="F"; shift 1;;
		-1|--read1) READ1="$2"; shift 2;;
		-2|--read2) READ2="$2"; shift 2;;
		-n|--expectedCells) MAXCELLS="$2"; shift 2;;
		-o|--output) PREFIX="$2"; shift 2;;
		-i|--index) SALMONINDEX="$2"; shift 2;;
		-g|--txp2gene) TXP2GENE="$2"; shift 2;;
		-t|--threads) CORES="$2"; shift 2;;

		-*|--*) echo "unknown option: $1" >&2; exit 1;;

	esac
done


#dependencies
FASTQC='/storage1/downloads/fastqc-0.11.7/fastqc'
CUTADAPT='/storage1/local/python/python-3.6.5/bin/cutadapt'
UMITOOLS='/storage1/local/python/python-3.6.5/bin/umi_tools'
SALMON='/storage1/downloads/salmon-0.11.1-linux_x86_64/bin/salmon'
CREATEMATRIX='/storage1/scripts/scRNAseq/ikura/10x/createMatrix'

#exec
SECONDS=0

#setup directories
if [ ! -d "$PREFIX" ]; then
	mkdir $PREFIX
fi

cd ${PREFIX}

if [ ! -d "logs" ]; then
	mkdir logs
fi

if [ ! -d "plots" ]; then
        mkdir plots
fi

if [ ! -d "fastq" ]; then
        mkdir fastq
fi

if [ ! -d "qc" ]; then
        mkdir qc
fi

#data process
echo "job started on" $(date)
if [ "${CHECK}" = "T" ]
then
	echo "cleaning fastq files..."
	${CUTADAPT} -j ${CORES} -q 30 --max-n 0 --minimum-length 26:90 --pair-filter=any -o fastq/${PREFIX}_trimmed_R1.fastq.gz -p fastq/${PREFIX}_trimmed_R2.fastq.gz ${READ1} ${READ2} | tee logs/cutadapt.log

	echo "checking the quality of fastq files..."
	for FILEZ in ${READ1} ${READ2} fastq/${PREFIX}_trimmed_R1.fastq.gz fastq/${PREFIX}_trimmed_R2.fastq.gz; do
		SHORT=$(basename ${FILEZ})
		gunzip -c ${FILEZ} > ${SHORT%.*}.fastq
		${FASTQC} -o qc/ -t ${CORES} -q ${SHORT%.*}.fastq
		rm ${SHORT%.*}.fastq
	done

	echo "identifying valid cell barcodes..."
	${UMITOOLS} whitelist --stdin fastq/${PREFIX}_trimmed_R1.fastq.gz --bc-pattern=CCCCCCCCCCCCCCCCNNNNNNNNNN --expect-cells=${MAXCELLS} -L logs/umiWhitelist${PREFIX}.log --verbose=2 --plot-prefix=plots/filteringPlot_${PREFIX} > whitelist_${PREFIX}.txt

	awk '{print $1}' whitelist_${PREFIX}.txt > whitelist_${PREFIX}_alevinReady.txt
mv whitelist_${PREFIX}.txt logs/

	echo "starting alignment..."
	${SALMON} --no-version-check alevin -lISR -1 fastq/${PREFIX}_trimmed_R1.fastq.gz -2 fastq/${PREFIX}_trimmed_R2.fastq.gz --chromium --whitelist whitelist_${PREFIX}_alevinReady.txt -i ${SALMONINDEX} -p ${CORES} --dumpFeatures --dumpCsvCounts -o alevinOut --tgMap ${TXP2GENE}

else
	echo "identifying valid cell barcodes..."
	${UMITOOLS} whitelist --stdin ${READ1} --bc-pattern=CCCCCCCCCCCCCCCCNNNNNNNNNN --expect-cells=${MAXCELLS} -L logs/umiWhitelist${PREFIX}.log --verbose=2 --plot-prefix=plots/filteringPlot_${PREFIX} > whitelist_${PREFIX}.txt

	awk '{print $1}' whitelist_${PREFIX}.txt > whitelist_${PREFIX}_alevinReady.txt
mv whitelist_${PREFIX}.txt logs/

	echo "starting alignment..."
	${SALMON} --no-version-check alevin -lISR -1 ${READ1} -2 ${READ2} --chromium --whitelist whitelist_${PREFIX}_alevinReady.txt -i ${SALMONINDEX} -p ${CORES} --dumpFeatures --dumpCsvCounts -o alevinOut --tgMap ${TXP2GENE}
fi

echo "exporting matrix..."
${CREATEMATRIX} alevinOut/

echo "cleaning directories..."
mv alevinOut/logs/* logs/
mv alevinOut/libParams/* logs/
mv alevinOut/*.json logs/
mv alevinOut/outs/* alevinOut/
mv alevinOut/alevin/MappedUmi.txt logs/
mv alevinOut/alevin/filtered_cb_frequency.txt logs/
rm -r alevinOut/alevin/ alevinOut/aux_info/ alevinOut/libParams/ alevinOut/logs/ alevinOut/outs/
mv whitelist_${PREFIX}_alevinReady.txt logs/goodCellBarcodes_${PREFIX}.txt
mv alevinOut/ outs/

END=${SECONDS}

echo "job complete on " $(date)
echo "total execution time (min): " $((${END} / 60))

exit 0
